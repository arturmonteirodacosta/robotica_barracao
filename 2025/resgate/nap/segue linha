// Definição dos pinos
const int trigPin = 7;    // Pino TRIG do HC-SR04
const int echoPin = 6;    // Pino ECHO do HC-SR04

// Pinos MH-Sensor-Seria
const int sensorEsquerdo = A7;  // Pino analógico para o sensor IR esquerdo
const int sensorDireito = A6;   // Pino analógico para o sensor IR direito

// Pinos Ponte-H
const int IN1 = 5;  // Controle de direção motor esquerdo
const int IN2 = 4;  // Controle de direção motor esquerdo
const int IN3 = 3;  // Controle de direção motor direito
const int IN4 = 2;  // Controle de direção motor direito

const int limiar = 25;      // Limiar para distinguir branco (alto) de preto (baixo)

// Variáveis
long duracao;
float distancia;
int valorEsquerdo,valorDireito;

// Função de setup
void setup() {
  Serial.begin(9600);
  // Configura os pinos dos sensores como entrada
  pinMode(sensorEsquerdo, INPUT);
  pinMode(sensorDireito, INPUT);
  
  // Configura os pinos da ponte H como saída
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

// Função principal de loop
void loop() {

  // Pulso ultrassônico
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Mede a duração do pulso de eco
  duracao = pulseIn(echoPin, HIGH);

  // Calcula a distância
  distancia = (duracao * 0.034) / 2;

  // Verifica se a distância está dentro do intervalo válido
  if (distancia >= 2 && distancia <= 15) {
    Serial.print("Distancia: ");
    Serial.print(distancia);
    Serial.println(" cm");
    manobra();
  } else {
    Serial.println("Distancia fora do alcance!");
  }

  // Lê os valores analógicos dos sensores
  valorEsquerdo = analogRead(sensorEsquerdo);
  valorDireito = analogRead(sensorDireito);
  
  // Converte para HIGH (branco) ou LOW (preto) com base no limiar
  bool esquerdo = valorEsquerdo < limiar ? HIGH : LOW;
  bool direito = valorDireito < limiar ? HIGH : LOW;

  mostrar();
  
  if (esquerdo == HIGH && direito == HIGH) {
    // Ambos sobre branco: seguir em frente
    frente();
  } else if (esquerdo == LOW && direito == HIGH) {
    // Esquerdo sobre preto, direito sobre branco: virar à direita
    viraDireita();
  } else if (esquerdo == HIGH && direito == LOW) {
    // Esquerdo sobre branco, direito sobre preto: virar à esquerda
    viraEsquerda();
  } else {
    // Ambos sobre preto: parar
    parar();
  }
}

void manobra(){
  int i,tempo=100,atraso=10000;
  //for(i=0; i<=tempo;i++){
    viraDireita();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    frente();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    viraEsquerda();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    frente();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    viraEsquerda();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    frente();
    delay(atraso);
  //}
  //for(i=0; i<=tempo;i++){
    viraDireita();
    delay(atraso);
  //}
}


// Função para ir para frente
void frente() {
  // Motor esquerdo para frente
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  
  // Motor direito para frente
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

// Função para virar à esquerda (parar motor esquerdo, motor direito para frente)
void viraEsquerda() {
  // Motor esquerdo parado
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  
  // Motor direito para frente
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

// Função para virar à direita (motor esquerdo para frente, motor direito parado)
void viraDireita() {
  // Motor esquerdo para frente
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  
  // Motor direito parado
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

// Função para parar
void parar() {
  // Ambos motores parados
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void mostrar(){
  Serial.print("Valor direito: |");
  Serial.print(valorDireito);
  Serial.print(" Valor esquerdo:");
  Serial.println(valorEsquerdo);
}
