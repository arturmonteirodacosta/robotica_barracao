Esse codigo faz oq?
- Quando não tiver obstáculo até 30 cm, os 4 motores ligam e o buzzer faz pii pii pii.
- Quando tiver obstáculo ≤ 30 cm, os motores e buzzer desligam.

// Definição dos pinos
const int trigPin = 11;    // Pino TRIG do HC-SR04
const int echoPin = 12;    // Pino ECHO do HC-SR04
const int ledPin = 13;     // LED embutido no Arduino Nano
const int buzzerPin = 10;  // Buzzer


// Pinos da ponte H (2 canais)
const int motorAIn1 = 2;   // Canal A
const int motorAIn2 = 3;


const int motorBIn1 = 4;   // Canal B
const int motorBIn2 = 5;


// Variáveis
long duracao;
float distancia;


void setup() {
  Serial.begin(9600);


  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);


  pinMode(motorAIn1, OUTPUT);
  pinMode(motorAIn2, OUTPUT);
  pinMode(motorBIn1, OUTPUT);
  pinMode(motorBIn2, OUTPUT);


  pararMotores();
  noTone(buzzerPin);
}


void loop() {
  // Pulso ultrassônico
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);


  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);


  duracao = pulseIn(echoPin, HIGH);
  distancia = (duracao * 0.034) / 2;


  Serial.print("Distancia: ");
  Serial.print(distancia);
  Serial.println(" cm");


  // LED: obstáculo < 10cm
  if (distancia < 10.0 && distancia > 0) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }


  // Controle motores + buzzer
  if (distancia > 30.0 || distancia <= 0) {
    ligarMotores();


    // Buzzer "pii pii pii"
    for (int i = 0; i < 3; i++) {
      tone(buzzerPin, 1000);
      delay(200);            
      noTone(buzzerPin);    
      delay(200);            
    }
  } else {
    pararMotores();
    noTone(buzzerPin);
  }


  delay(500);
}


// --- Funções auxiliares ---
void ligarMotores() {
  // Canal A (Motores 1 e 2)
  digitalWrite(motorAIn1, HIGH);
  digitalWrite(motorAIn2, LOW);


  // Canal B (Motores 3 e 4)
  digitalWrite(motorBIn1, HIGH);
  digitalWrite(motorBIn2, LOW);
}


void pararMotores() {
  digitalWrite(motorAIn1, LOW);
  digitalWrite(motorAIn2, LOW);
  digitalWrite(motorBIn1, LOW);
  digitalWrite(motorBIn2, LOW);
}

